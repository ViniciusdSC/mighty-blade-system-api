// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	models "github.com/ViniciusdSC/mighty-blade-system-api/internal/api/models"
	services "github.com/ViniciusdSC/mighty-blade-system-api/internal/api/services"
	mock "github.com/stretchr/testify/mock"
)

// ItemService is an autogenerated mock type for the ItemService type
type ItemService struct {
	mock.Mock
}

// Count provides a mock function with given fields: filter
func (_m *ItemService) Count(filter services.ItemFilter) (*int64, error) {
	ret := _m.Called(filter)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(services.ItemFilter) (*int64, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(services.ItemFilter) *int64); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(services.ItemFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: model
func (_m *ItemService) Create(model *models.ItemModel) error {
	ret := _m.Called(model)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ItemModel) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: model
func (_m *ItemService) Delete(model *models.ItemModel) error {
	ret := _m.Called(model)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ItemModel) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: filter
func (_m *ItemService) Find(filter services.ItemFilter) ([]models.ItemModel, error) {
	ret := _m.Called(filter)

	var r0 []models.ItemModel
	var r1 error
	if rf, ok := ret.Get(0).(func(services.ItemFilter) ([]models.ItemModel, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(services.ItemFilter) []models.ItemModel); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ItemModel)
		}
	}

	if rf, ok := ret.Get(1).(func(services.ItemFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: id
func (_m *ItemService) FindOne(id string) (*models.ItemModel, error) {
	ret := _m.Called(id)

	var r0 *models.ItemModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.ItemModel, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.ItemModel); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ItemModel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: model, values
func (_m *ItemService) Update(model *models.ItemModel, values *models.ItemModel) error {
	ret := _m.Called(model, values)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ItemModel, *models.ItemModel) error); ok {
		r0 = rf(model, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validate provides a mock function with given fields: model, ignoreRules
func (_m *ItemService) Validate(model *models.ItemModel, ignoreRules ...string) error {
	_va := make([]interface{}, len(ignoreRules))
	for _i := range ignoreRules {
		_va[_i] = ignoreRules[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, model)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ItemModel, ...string) error); ok {
		r0 = rf(model, ignoreRules...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewItemService creates a new instance of ItemService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItemService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ItemService {
	mock := &ItemService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
