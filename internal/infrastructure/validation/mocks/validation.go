// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AppValidate is an autogenerated mock type for the AppValidate type
type AppValidate struct {
	mock.Mock
}

// StructExceptRules provides a mock function with given fields: s, rules
func (_m *AppValidate) StructExceptRules(s interface{}, rules ...string) error {
	_va := make([]interface{}, len(rules))
	for _i := range rules {
		_va[_i] = rules[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...string) error); ok {
		r0 = rf(s, rules...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAppValidate creates a new instance of AppValidate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppValidate(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppValidate {
	mock := &AppValidate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
